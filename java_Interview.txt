1. 九种基本数据类型的大小，以及他们的封装类。
	类型         大小（字节）  包装类
	byte          1        Byte
	short         2        Short
	char          4        Character
	int           4        Integer
	long          8        Long
	float         4        Float
	double        8        Double
	boolean       1/8      Boolean
	
2. Switch能否用string做参数？
	JDK1.7之前Switch只能判断byte、short、char、int，JDK1.7开始Switch可以判断String
	
3. equals与==的区别。
	==：是判断两个变量或实例是不是指向同一个内存空间
	equals：是判断两个变量或实例所指向的内存空间的值是不是相同
	
4. Object有哪些公用方法？
	clone：实现对象的浅复制
	equals：判断两个对象是否相等
	hashcode：该方法用于哈希查找
	getclass：获得运行时类型
	toString：转换成字符串
	wait：使当前线程等待
	notify：唤醒在该对象上等待的某个线程
	notifyAll：唤醒在该对象上等待的所有线程

5. Java的四种引用，强弱软虚，用到的场景。
	强引用（StrongReference）：垃圾回收器绝不会回收它
	软引用（SoftReference）：内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存
	若引用（WeakReference）：一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存
	虚引用（PhantomReference）：发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中
	
6. Hashcode的作用。
	A、hashCode的存在主要是用于查找的快捷性，如Hashtable，HashMap等，hashCode是用来在散列存储结构中确定对象的存储地址的；

	B、如果两个对象相同，就是适用于equals(Java.lang.Object) 方法，那么这两个对象的hashCode一定要相同；

	C、如果对象的equals方法被重写，那么对象的hashCode也尽量重写，并且产生hashCode使用的对象，一定要和equals方法中使用的一致，否则就会违反上面提到的第2点；

	D、两个对象的hashCode相同，并不一定表示两个对象就相同，也就是不一定适用于equals(java.lang.Object) 方法，只能够说明这两个对象在散列存储结构中，如Hashtable，他们“存放在同一个篮子里”。

7. ArrayList、LinkedList、Vector的区别。
	A.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构
	B.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针
	C.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据
	D.Vector与ArrayList一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢。
	
8. String、StringBuffer与StringBuilder的区别。
	String类的内容一旦声明则不可改变，而StringBuffer、StringBuilder的内容可以改变；
	String、StringBuffer、StringBuilder都是CharSequence接口的子类；
	StringBuffer是从JDK1.0时提供的，属于线程安全操作，而StringBuilder是从JDK1.5开始提供的，属于非线程安全操作、性能更高
	
9. Map、Set、List、Queue、Stack的特点与用法。

10. HashMap和HashTable的区别。
	A.历史原因: Hashtable是给予陈旧的Dictonary类的, HashMap是Java1.2引进的Map接口的一个实现
	B.HashMap允许空的键值对, 而HashTable不允许
	C.HashTable同步，而HashMap非同步，效率上比HashTable要高
	
11. HashMap和ConcurrentHashMap的区别，HashMap的底层源码。
	ConcurrentHashMap中的key和value值都不能为null，HashMap中key可以为null，HashTable中key不能为null。
	ConcurrentHashMap是线程安全的类并不能保证使用了ConcurrentHashMap的操作都是线程安全的！
	ConcurrentHashMap的get操作不需要加锁，put操作需要加锁

	HashMap基于hashing原理，我们通过put()和get()方法储存和获取对象。当我们将键值对传递给put()方法时，
	它调用键对象的hashCode()方法来计算hashcode，让后找到bucket位置来储存值对象。当获取对象时，通过键对象的equals()方法找到正确的键值对，
	然后返回值对象。HashMap使用链表来解决碰撞问题，当发生碰撞了，对象将会储存在链表的下一个节点中。 HashMap在每个链表节点中储存键值对对象。

	当两个不同的键对象的hashcode相同时会发生什么？ 它们会储存在同一个bucket位置的链表中。键对象的equals()方法用来找到键值对。
	
12. TreeMap、HashMap、LindedHashMap的区别。

13. Collection包结构，与Collections的区别。

14. try catch finally，try里有return，finally还执行么？
	执行
	
15. Excption与Error包结构。OOM你遇到过哪些情况，SOF你遇到过哪些情况。
	内存泄露和内存溢出的区别：

	内存泄露是指分配出去的内存没有被回收回来，由于失去了对该内存区域的控制，因而造成了资源的浪费。
	Java中一般不会产生内存泄露，因为有垃圾回收器自动回收垃圾，但这也不绝对，当我们new了对象，并保存了其引用，但是后面一直没用它，而垃圾回收器又不会去回收它，这边会造成内存泄露，

	内存溢出是指程序所需要的内存超出了系统所能分配的内存（包括动态扩展）的上限。

16. Java面向对象的三个特征与含义。

17. Override和Overload的含义去区别。

18. Interface与abstract类的区别。

19. Static class 与non static class的区别。

20. java多态的实现原理。

21. 实现多线程的两种方法：Thread与Runable。

22. 线程同步的方法：sychronized、lock、reentrantLock等。

23. 锁的等级：方法锁、对象锁、类锁。

24. 写出生产者消费者模式。
	package com.whs.thread;
	//主方法
	public class ProductConsumeTest {
		
		public static void main(String[] args) {
			// TODO Auto-generated method stub
			Info info = new Info();
			Product p = new Product(info);
			Consume c = new Consume(info);
			new Thread(p).start();
			new Thread(c).start();
		}
	}

	//生产者
	class Product implements Runnable {
		private Info info = null;

		public Product(Info info) {
			this.info = info;
		}

		@Override
		public void run() {
			for (int i = 0; i < 50; i++) {
				if (i % 2 == 0) {
					this.info.set("淘汰浪", "大灰狼");
				} else {
					this.info.set("可爱小动物", "小狗");
				}

			}
		}
	}

	//消费者
	class Consume implements Runnable {
		private Info info;

		public Consume(Info info) {
			this.info = info;
		}

		@Override
		public void run() {
			for (int i = 0; i < 50; i++) {
				this.info.get();
			}
		}
	}

	//共享数据
	public class Info {
		private String title;
		private String content;
		
		private boolean flag = true;

		public synchronized void set(String title, String content) {
			if (!flag) {
				try {
					super.wait();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			this.title = title;
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			this.content = content;
			flag = false; //可以取走
			super.notify();
		}

		public synchronized void get() {
			if (flag) {
				try {
					super.wait();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.println(this.title + "-->" + this.content);
			flag = true; //可以生产
			super.notify();
		}
	}
25. ThreadLocal的设计理念与作用。

26. ThreadPool用法与优势。

27. Concurrent包里的其他东西：ArrayBlockingQueue、CountDownLatch等等。

28. wait()和sleep()的区别。
	sleep是Thread类定义的方法，在休眠到一定时间之后将自己唤醒；
	wait是Object定义个的方法，必须通过notify()、notifyAll()方法来进行唤醒
	
29. foreach与正常for循环效率对比。
	for循环效率高

30. Java IO与NIO。

31. 反射的作用于原理。
	A.先看一下反射的概念：
		主要是指程序可以访问，检测和修改它本身状态或行为的一种能力，并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。
		反射是Java中一种强大的工具，能够使我们很方便的创建灵活的代码，这些代码可以再运行时装配，无需在组件之间进行源代码链接。但是反射使用不当会成本很高！
		看概念很晕的，继续往下看。
 
     B.反射机制的作用：
		1，反编译：.class-->.java
		2,通过反射机制访问java对象的属性，方法，构造方法等
		
32. 泛型常用特点，List<String>能否转为List<Object>。
	
33. 解析XML的几种方式的原理与特点：DOM、SAX、PULL。

34. Java与C++对比。
	A.Java中对内存的分配是动态的
	B.Java不在所有类之外定义全局变量
	C.Java不用goto语句,而是用try-catch-finally异常处理语句来代替goto语句处理出错的功能.
	D.Java不支持头文件
	E.Java不支持宏定义
	F.Java对每种数据类型都分配固定长度
	G.类型转换不同
	H.结构和联合的处理
	I.Java不再使用指针
	
35. Java1.7与1.8新特性。

36. 设计模式：单例模式
	单例模式是一种常见的设计模式，单例模式的写法有好几种，这里主要介绍三种：懒汉式单例、饿汉式单例、登记式单例（可忽略）。
	单例模式有以下特点：
	　　1、单例类只能有一个实例。
	　　2、单例类必须自己创建自己的唯一实例。
	　　3、单例类必须给所有其他对象提供这一实例。
	懒汉式单例实现
		1、非线程安全
		public class Singleton {  
			private Singleton() {}  
			private static Singleton single=null;  
			//静态工厂方法   
			public static Singleton getInstance() {  
				 if (single == null) {    
					 single = new Singleton();  
				 }    
				return single;  
			}  
		}
		2、在getInstance方法上加同步
		public class Singleton {  
			private Singleton() {}  
			private static Singleton single=null;  
			//静态工厂方法   
			public static synchronized Singleton getInstance() {  
			 if (single == null) {    
				 single = new Singleton();  
			 }    
				return single;  
			}  
		}
		3、双重检查锁定
		public class Singleton {  
			private Singleton() {}  
			private static Singleton single=null;  
			//静态工厂方法   
			public static Singleton getInstance() {  
				if (singleton == null) {    
					synchronized (Singleton.class) {    
					   if (singleton == null) {    
						  singleton = new Singleton();   
					   }    
					}    
				}    
				return singleton;   
			}  
		}
		4、静态内部类
		public class Singleton {    
			private static class LazyHolder {    
			   private static final Singleton INSTANCE = new Singleton();    
			}    
			private Singleton (){}    
			public static final Singleton getInstance() {    
			   return LazyHolder.INSTANCE;    
			}    
		}
	饿汉式单例实现：
		//饿汉式单例类.在类初始化时，已经自行实例化   
		public class Singleton1 {  
			private Singleton1() {}  
			private static final Singleton1 single = new Singleton1();  
			//静态工厂方法   
			public static Singleton1 getInstance() {  
				return single;  
			}  
		}  
	饿汉式和懒汉式区别：
		饿汉就是类一旦加载，就把单例初始化完成，保证getInstance的时候，单例是已经存在的了，而懒汉比较懒，只有当调用getInstance的时候，才回去初始化这个单例；
		饿汉式天生就是线程安全的，可以直接用于多线程而不会出现问题，而懒汉式本身是非线程安全的，为了实现线程安全有几种写法，分别是上面的2、3、4，这三种实现在资源加载和性能方面有些区别。
36. 设计模式：工厂模式
	A.简单工厂模式是由一个具体的类去创建其他类的实例，父类是相同的，父类是具体的。 
	B.工厂方法模式是有一个抽象的父类定义公共接口，子类负责生成具体的对象，这样做的目的是将类的实例化操作延迟到子类中完成。 
	C.抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无须指定他们具体的类。它针对的是有多个产品的等级结构。而工厂方法模式针对的是一个产品的等级结构。

36. 设计模式：单例模式、工厂、适配器、责任链、观察者等等。
36. 设计模式：单例模式、工厂、适配器、责任链、观察者等等。
36. 设计模式：单例模式、工厂、适配器、责任链、观察者等等。

37. JNI的使用。
	了解JNI：JAVA因其跨平台特性而受人们喜爱，也正因此，使得它和本机各种内部联系变得很少，
	所以JNI(Java Native Interface)就是用来解决JAVA本地操作的一种方式。
	JAVA通过JNI调用本地方法，而本地方法是以库文件的形式存放的（在WINDOWS平台上是DLL文件形式，在UNIX机器上是SO文件形式）。
	通过调用本地的库文件的内部方法，使JAVA可以实现和本地机器的紧密联系，调用系统级的各接口方法。

38.请简述在异常当中，throw和throws有什么区别
	A.throw代表动作，表示抛出一个异常的动作；throws代表一种状态，代表方法可能有异常抛出
	B.throw用在方法实现中，而throws用在方法声明中
	C.throw只能用于抛出一种异常，而throws可以抛出多个异常
	
39.Minor GC 和Full GC区别
	新生代GC(Minor GC)：指发生在新生代的垃圾收集动作，因为对象大多都具备朝生夕灭特性，所以Minor GC非常频繁，回收速度也比较快。
	老年代GC(Major GC / Full GC)：指发生在老年代中的GC，出现Major GC后，经常会伴随至少一次的 Minor GC。Major GC的速度一般会比Minor GC慢10倍以上。